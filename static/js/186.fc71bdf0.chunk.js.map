{"version":3,"file":"static/js/186.fc71bdf0.chunk.js","mappings":"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","sources":["components/Title/Title.styled.js","components/Title/Title.jsx","pages/MoviesDetailsPage/MoviesDetailsPage.styled.js","pages/MoviesDetailsPage/MoviesDetailsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const TitleEl = styled.h2`\n  text-align: left;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { TitleEl } from './Title.styled';\n\nconst Title = ({ title }) => {\n  return <TitleEl>{title}</TitleEl>;\n};\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: left;\n`;\n\nexport const Img = styled.img`\n  margin-right: 30px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  gap: 30px;\n  list-style: none;\n  padding-bottom: 15px;\n  border-bottom: 1px solid black;\n  color: black;\n`;\n\nexport const LinkEl = styled(Link)`\n  text-decoration: none;\n  color: black;\n  outline: 2px solid black;\n  border-radius: 5px;\n  padding: 5px;\n\n  :hover {\n    background: tomato;\n    color: white;\n  }\n`;\n","import { useState, useEffect, useRef } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { fetchMoviesDetails } from 'api/MoviedbAPI';\nimport Loader from 'components/Loader';\nimport Title from 'components/Title';\nimport { Wrapper, Img } from './MoviesDetailsPage.styled';\n\nconst MoviesDetailsPage = () => {\n  const [movieDetails, setMovieDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n  const backLinkRef = useRef(location);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMoviesDetails() {\n      setIsLoading(true);\n\n      try {\n        const response = await fetchMoviesDetails(movieId);\n\n        setMovieDetails(response);\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getMoviesDetails();\n  }, [movieId]);\n\n  const { poster_path, title, genres, overview, vote_average, release_date } =\n    movieDetails;\n\n  return (\n    <>\n      <Link to={backLinkRef.current.state?.from ?? '/'}>\n        <button>Back</button>\n      </Link>\n      {isLoading && <Loader />}\n\n      <Title title={'Movie Details'} />\n\n      <Wrapper>\n        <Img\n          src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n          alt={title}\n        />\n\n        <div>\n          {title && (\n            <h2>\n              {title} {release_date.substr(0, 4)}\n            </h2>\n          )}\n\n          <p>User Score: {vote_average && Math.floor(vote_average * 10)}%</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          {genres && <p>{genres.map(({ name }) => name).join(', ')}</p>}\n        </div>\n      </Wrapper>\n\n      <Link to=\"cast\">Cast</Link>\n      <Link to=\"reviews\">Reviews</Link>\n\n      <Outlet />\n    </>\n  );\n};\n\nexport default MoviesDetailsPage;\n"],"names":["TitleEl","styled","_templateObject","_taggedTemplateLiteral","_ref","title","_jsx","children","Wrapper","Img","_templateObject2","_templateObject3","Link","_templateObject4","_backLinkRef$current$","_backLinkRef$current$2","_useState","useState","_useState2","_slicedToArray","movieDetails","setMovieDetails","_useState3","_useState4","isLoading","setIsLoading","location","useLocation","backLinkRef","useRef","movieId","useParams","useEffect","_getMoviesDetails","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","fetchMoviesDetails","sent","t0","toast","message","finish","stop","apply","arguments","getMoviesDetails","poster_path","genres","overview","vote_average","release_date","_jsxs","_Fragment","to","current","state","from","Loader","Title","src","concat","alt","substr","Math","floor","map","name","join","Outlet"],"sourceRoot":""}