{"version":3,"file":"static/js/35.3c63e6a2.chunk.js","mappings":"oNAGaA,EAAOC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6EAOhBC,EAAOH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+DAMhBG,GAASL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAYO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,uFAQrBM,EAAOR,EAAAA,GAAAA,IAAUS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,yI,SCwB9B,EA3CmB,SAAHQ,GAAoB,IAAdC,EAAMD,EAANC,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACf,EAAI,CAAAiB,SACFL,EAAOM,KAAI,SAAAC,GAAiC,IAA9BC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAOC,EAAWH,EAAXG,YACxB,OAAID,GAEAN,EAAAA,EAAAA,KAACX,EAAI,CAAAa,UACHF,EAAAA,EAAAA,KAACT,EAAM,CAACiB,GAAE,WAAAC,OAAaJ,GAAMK,MAAO,CAAEC,KAAMb,GAAWI,UACrDU,EAAAA,EAAAA,MAAClB,EAAI,CAAAQ,SAAA,CACFK,GACCP,EAAAA,EAAAA,KAAA,OACEa,IAAG,kCAAAJ,OAAoCF,GACvCO,IAAKR,KAGPN,EAAAA,EAAAA,KAAA,KAAAE,SAAG,cAEJI,QAXID,GAiBR,IACT,OAIR,C,qEClCaU,E,OAAU7B,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8E,SCShC,EARc,SAAHQ,GAAmB,IAAbU,EAAKV,EAALU,MACf,OAAON,EAAAA,EAAAA,KAACe,EAAO,CAAAb,SAAEI,GACnB,C,wKCsCA,EAnCiB,WACf,IAAAU,GAA4CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GACxCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAoB9B,OAlBAG,EAAAA,EAAAA,YAAU,WACgB,SAAAC,IAYvB,OAZuBA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAxB,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACqB,OAAnBT,GAAa,GAAMO,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAGMC,EAAAA,EAAAA,MAAgB,KAAD,EAAhCJ,EAAQC,EAAAI,KAEdf,EAAkBU,EAASM,SAASL,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEpCO,EAAAA,GAAAA,MAAYP,EAAAM,GAAME,SAAS,QAEP,OAFOR,EAAAC,KAAA,GAE3BR,GAAa,GAAOO,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,yBAEvBa,MAAA,KAAAC,UAAA,EAbc,WACSjB,EAAAgB,MAAC,KAADC,UAAA,CAcxBC,EACF,GAAG,KAGDjC,EAAAA,EAAAA,MAAAX,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,CAACxC,MAAO,aAEbkB,IAAaxB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,IAEpB3B,EAAe4B,OAAS,IAAMxB,IAC7BxB,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,CAACpD,OAAQuB,MAI5B,C","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/Title/Title.styled.js","components/Title/Title.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const Item = styled.li`\n  list-style: none;\n  padding: 15px;\n  margin: 0;\n`;\n\nexport const LinkEl = styled(Link)`\n  text-decoration: none;\n  color: black;\n  :hover {\n    color: red;\n  }\n`;\n\nexport const Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  text-align: center;\n  width: 200px;\n  height: 355px;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { List, Item, LinkEl, Card } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <List>\n        {movies.map(({ id, title, poster_path }) => {\n          if (title) {\n            return (\n              <Item key={id}>\n                <LinkEl to={`/movies/${id}`} state={{ from: location }}>\n                  <Card>\n                    {poster_path ? (\n                      <img\n                        src={`https://image.tmdb.org/t/p/w200${poster_path}`}\n                        alt={title}\n                      />\n                    ) : (\n                      <p>No Poster</p>\n                    )}\n                    {title}\n                  </Card>\n                </LinkEl>\n              </Item>\n            );\n          }\n          return null;\n        })}\n      </List>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const TitleEl = styled.h2`\n  text-align: left;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { TitleEl } from './Title.styled';\n\nconst Title = ({ title }) => {\n  return <TitleEl>{title}</TitleEl>;\n};\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { fetchTrending } from 'api/MoviedbAPI';\nimport MoviesList from 'components/MoviesList';\nimport Loader from 'components/Loader';\nimport Title from 'components/Title';\n\nconst HomePage = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n\n      try {\n        const response = await fetchTrending();\n\n        setTrendingMovies(response.results);\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getMovies();\n  }, []);\n\n  return (\n    <>\n      <Title title={'Trending'} />\n\n      {isLoading && <Loader />}\n\n      {trendingMovies.length > 0 && !isLoading && (\n        <MoviesList movies={trendingMovies} />\n      )}\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","LinkEl","Link","_templateObject3","Card","_templateObject4","_ref","movies","location","useLocation","_jsx","_Fragment","children","map","_ref2","id","title","poster_path","to","concat","state","from","_jsxs","src","alt","TitleEl","_useState","useState","_useState2","_slicedToArray","trendingMovies","setTrendingMovies","_useState3","_useState4","isLoading","setIsLoading","useEffect","_getMovies","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","fetchTrending","sent","results","t0","toast","message","finish","stop","apply","arguments","getMovies","Title","Loader","length","MoviesList"],"sourceRoot":""}