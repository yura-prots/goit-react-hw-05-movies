{"version":3,"file":"static/js/340.d93acfdc.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <ul>\n        {movies.map(({ id, title }) => {\n          if (title) {\n            return (\n              <li key={id}>\n                <Link to={`/movies/${id}`} state={{ from: location }}>\n                  {title}\n                </Link>\n              </li>\n            );\n          }\n          return null;\n        })}\n      </ul>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MoviesList;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nconst Searchbar = ({ onSearch }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (query === '') {\n      return toast.info('Enter movie name');\n    }\n    onSearch(query);\n\n    setQuery('');\n  };\n\n  const handleQuery = e => {\n    setQuery(e.target.value.toLowerCase());\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          onChange={handleQuery}\n          placeholder=\"Enter movie name\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n};\n\nSearchbar.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect, useRef } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { fetchMovies } from 'api/MoviedbAPI';\nimport Searchbar from 'components/Searchbar';\nimport MoviesList from 'components/MoviesList';\nimport Loader from 'components/Loader';\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n  const backLinkRef = useRef(location);\n\n  const movieName = searchParams.get('query') ?? '';\n\n  const handleSearch = query => {\n    const changeParams = query !== '' ? { query } : {};\n    setSearchParams(changeParams);\n  };\n\n  useEffect(() => {\n    async function searchMovie() {\n      if (!movieName) {\n        return;\n      }\n\n      setIsLoading(true);\n\n      try {\n        const response = await fetchMovies(movieName);\n\n        setMovies(response.results);\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    searchMovie();\n  }, [movieName]);\n\n  return (\n    <>\n      <Link to={backLinkRef.current.state?.from ?? '/'}>\n        <button>Back</button>\n      </Link>\n\n      <Searchbar onSearch={handleSearch} />\n\n      {isLoading && <Loader />}\n\n      {movies.length > 0 && !isLoading && <MoviesList movies={movies} />}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["_ref","movies","location","useLocation","_jsx","_Fragment","children","map","_ref2","id","title","Link","to","concat","state","from","onSearch","_useState","useState","_useState2","_slicedToArray","query","setQuery","_jsxs","onSubmit","e","preventDefault","toast","type","name","value","onChange","target","toLowerCase","placeholder","autoComplete","autoFocus","_searchParams$get","_backLinkRef$current$","_backLinkRef$current$2","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","setMovies","_useState3","_useState4","isLoading","setIsLoading","backLinkRef","useRef","movieName","get","useEffect","_searchMovie","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","abrupt","fetchMovies","sent","results","t0","message","finish","stop","apply","arguments","searchMovie","current","Searchbar","Loader","length","MoviesList"],"sourceRoot":""}